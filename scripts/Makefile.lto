#
# Support for gcc link time optimization
#

DISABLE_LTO :=
LTO_CFLAGS :=

export DISABLE_LTO
export LTO_CFLAGS

ifdef CONFIG_LTO
	LTO_FINAL_CFLAGS := -flto=$(shell getconf _NPROCESSORS_ONLN)
	#LTO_FINAL_CFLAGS := -flto=jobserver
	LTO_CFLAGS := -flto -fno-toplevel-reorder

ifdef CONFIG_LTO_SLIM
	# requires plugin ar passed and very recent HJ binutils
        LTO_CFLAGS += -fno-fat-lto-objects
endif
# Used to disable LTO for specific files (e.g. vdso)
	DISABLE_LTO := -fno-lto

	LTO_FINAL_CFLAGS += ${LTO_CFLAGS} -fwhole-program

ifdef CONFIG_LTO_DEBUG
	LTO_FINAL_CFLAGS += -dH -fdump-ipa-cgraph -fdump-ipa-inline-details
	# -Wl,-plugin-save-temps -save-temps
	LTO_CFLAGS +=
endif
ifdef CONFIG_LTO_CP_CLONE
	LTO_FINAL_CFLAGS += -fipa-cp-clone
	LTO_CFLAGS += -fipa-cp-clone
endif

	# In principle gcc should pass through options in the object files,
	# but it doesn't always work. So do it here manually
	# Note that special options for individual files does not
	# work currently (except for some special cases that only
	# affect the compiler frontend)
	# The main offenders are FTRACE and GCOV -- we exclude
	# those in the config.
	LTO_FINAL_CFLAGS += $(filter -g%,${KBUILD_CFLAGS})
	LTO_FINAL_CFLAGS += $(filter -O%,${KBUILD_CFLAGS})
	LTO_FINAL_CFLAGS += $(filter -f%,${KBUILD_CFLAGS})
	LTO_FINAL_CFLAGS += $(filter -m%,${KBUILD_CFLAGS})
	LTO_FINAL_CFLAGS += $(filter -W%,${KBUILD_CFLAGS})

	KBUILD_CFLAGS += ${LTO_CFLAGS}

	LDFINAL := ${CONFIG_SHELL} ${srctree}/scripts/gcc-ld \
                  ${LTO_FINAL_CFLAGS}

endif
