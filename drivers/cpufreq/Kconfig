menu "CPU Frequency scaling"

config CPU_FREQ
	bool "CPU Frequency scaling"
	help
	  CPU Frequency scaling allows you to change the clock speed of 
	  CPUs on the fly. This is a nice method to save power, because 
	  the lower the CPU clock speed, the less power the CPU consumes.

	  Note that this driver doesn't automatically change the CPU
	  clock speed, you need to either enable a dynamic cpufreq governor
	  (see below) after boot, or use a userspace tool.

	  For details, take a look at <file:Documentation/cpu-freq>.

	  If in doubt, say N.

if CPU_FREQ

config CPU_FREQ_TABLE
	tristate

config CPU_FREQ_STAT
	tristate "CPU frequency translation statistics"
	select CPU_FREQ_TABLE
	default y
	help
	  This driver exports CPU frequency statistics information through sysfs
	  file system.

	  To compile this driver as a module, choose M here: the
	  module will be called cpufreq_stats.

	  If in doubt, say N.

config CPU_FREQ_STAT_DETAILS
	bool "CPU frequency translation statistics details"
	depends on CPU_FREQ_STAT
	help
	  This will show detail CPU frequency translation table in sysfs file
	  system.

	  If in doubt, say N.

choice
	prompt "Default CPUFreq governor"
	default CPU_FREQ_DEFAULT_GOV_USERSPACE if CPU_FREQ_SA1100 || CPU_FREQ_SA1110
	default CPU_FREQ_DEFAULT_GOV_PERFORMANCE
	help
	  This option sets which CPUFreq governor shall be loaded at
	  startup. If in doubt, select 'performance'.

config CPU_FREQ_DEFAULT_GOV_PERFORMANCE
	bool "performance"
	select CPU_FREQ_GOV_PERFORMANCE
	help
	  Use the CPUFreq governor 'performance' as default. This sets
	  the frequency statically to the highest frequency supported by
	  the CPU.

config CPU_FREQ_DEFAULT_GOV_POWERSAVE
	bool "powersave"
	depends on EXPERT
	select CPU_FREQ_GOV_POWERSAVE
	help
	  Use the CPUFreq governor 'powersave' as default. This sets
	  the frequency statically to the lowest frequency supported by
	  the CPU.

config CPU_FREQ_DEFAULT_GOV_USERSPACE
	bool "userspace"
	select CPU_FREQ_GOV_USERSPACE
	help
	  Use the CPUFreq governor 'userspace' as default. This allows
	  you to set the CPU frequency manually or when a userspace 
	  program shall be able to set the CPU dynamically without having
	  to enable the userspace governor manually.

config CPU_FREQ_DEFAULT_GOV_ONDEMAND
	bool "ondemand"
	select CPU_FREQ_GOV_ONDEMAND
	select CPU_FREQ_GOV_PERFORMANCE
	help
	  Use the CPUFreq governor 'ondemand' as default. This allows
	  you to get a full dynamic frequency capable system by simply
	  loading your cpufreq low-level hardware driver.
	  Be aware that not all cpufreq drivers support the ondemand
	  governor. If unsure have a look at the help section of the
	  driver. Fallback governor will be the performance governor.

config CPU_FREQ_DEFAULT_GOV_ONDEMANDPLUS
	bool "ondemandplus"
	select CPU_FREQ_GOV_ONDEMANDPLUS
	select CPU_FREQ_GOV_PERFORMANCE
	help
	  Use the CPUFreq governor 'ondemandplus' as default. This allows
	  you to get a full dynamic frequency capable system by simply
	  loading your cpufreq low-level hardware driver.
	  Be aware that not all cpufreq drivers support the ondemandplus
	  governor. If unsure have a look at the help section of the
	  driver. Fallback governor will be the performance governor.
	  
config CPU_FREQ_DEFAULT_GOV_CONSERVATIVE
	bool "conservative"
	select CPU_FREQ_GOV_CONSERVATIVE
	select CPU_FREQ_GOV_PERFORMANCE
	help
	  Use the CPUFreq governor 'conservative' as default. This allows
	  you to get a full dynamic frequency capable system by simply
	  loading your cpufreq low-level hardware driver.
	  Be aware that not all cpufreq drivers support the conservative
	  governor. If unsure have a look at the help section of the
	  driver. Fallback governor will be the performance governor.

config CPU_FREQ_DEFAULT_GOV_INTERACTIVE
	bool "interactive"
	select CPU_FREQ_GOV_INTERACTIVE
	help
	  Use the CPUFreq governor 'interactive' as default. This allows
	  you to get a full dynamic cpu frequency capable system by simply
	  loading your cpufreq low-level hardware driver, using the
	  'interactive' governor for latency-sensitive workloads.

config CPU_FREQ_DEFAULT_GOV_DYNAMIC
	bool "dynamic"
	select CPU_FREQ_GOV_DYNAMIC
	help
	  Use the CPUFreq governor 'dynamic' as default.
	  
config CPU_FREQ_DEFAULT_GOV_LIONHEART
	bool "lionheart"
	select CPU_FREQ_GOV_LIONHEART
	help
	  Use the CPUFreq governor 'lionheart' as default.
	  
config CPU_FREQ_DEFAULT_GOV_INTERACTIVEPLUS
	bool "interactiveplus"
	select CPU_FREQ_GOV_INTERACTIVEPLUS
	help
	  Use the CPUFreq governor 'interactiveplus' as default. This allows
	  you to get a full dynamic cpu frequency capable system by simply
	  loading your cpufreq low-level hardware driver, using the
	  'interactiveplus' governor for latency-sensitive workloads.

	  The 'interactiveplus' governor also hotplugs on suspend.

config CPU_FREQ_DEFAULT_GOV_ABYSSPLUG
	bool "abyssplug"
	select CPU_FREQ_GOV_ABYSSPLUG
	help
          Use the CPUFreq governor 'abyssplug' as default.
config CPU_FREQ_DEFAULT_GOV_ZZMOOVE
	  bool "zzmoove"
	  select CPU_FREQ_GOV_ZZMOOVE
	  select CPU_FREQ_GOV_PERFORMANCE
	  help
	  Use the CPUFreq governor 'zzmoove' as default, using predefined
	  frequency lookup tables and optimized scaling triggers instead of
	  % frequency steps to get smooth up/downscaling dependant on CPU load.
config CPU_FREQ_DEFAULT_GOV_PEGASUSQPLUS
	bool "pegasusq plus"
	select CPU_FREQ_GOV_PEGASUSQPLUS

config CPU_FREQ_DEFAULT_GOV_SMARTASS2
	bool "smartass2"
	select CPU_FREQ_GOV_SMARTASS2
	help
          Use the CPUFreq governor 'smartassV2' as default.
          
config CPU_FREQ_DEFAULT_GOV_LAGFREE
        bool "lagfree"
        select CPU_FREQ_GOV_LAGFREE
        select CPU_FREQ_GOV_PERFORMANCE
        help
          Use the CPUFreq governor 'lagfree' as default. This allows
          you to get a full dynamic frequency capable system by simply
          loading your cpufreq low-level hardware driver.
          Be aware that not all cpufreq drivers support the lagfree
          governor. If unsure have a look at the help section of the
          driver. Fallback governor will be the performance governor.

config CPU_FREQ_DEFAULT_GOV_ZENX
	bool "ZenX"
	select CPU_FREQ_GOV_ZENX
	help
		Use the CPUFreq governor 'ZenX' as default.
endchoice

config CPU_FREQ_GOV_PERFORMANCE
	tristate "'performance' governor"
	help
	  This cpufreq governor sets the frequency statically to the
	  highest available CPU frequency.

	  To compile this driver as a module, choose M here: the
	  module will be called cpufreq_performance.

	  If in doubt, say Y.

config CPU_FREQ_GOV_POWERSAVE
	tristate "'powersave' governor"
	help
	  This cpufreq governor sets the frequency statically to the
	  lowest available CPU frequency.

	  To compile this driver as a module, choose M here: the
	  module will be called cpufreq_powersave.

	  If in doubt, say Y.

config CPU_FREQ_GOV_USERSPACE
	tristate "'userspace' governor for userspace frequency scaling"
	help
	  Enable this cpufreq governor when you either want to set the
	  CPU frequency manually or when a userspace program shall
	  be able to set the CPU dynamically, like on LART 
	  <http://www.lartmaker.nl/>.

	  To compile this driver as a module, choose M here: the
	  module will be called cpufreq_userspace.

	  For details, take a look at <file:Documentation/cpu-freq/>.

	  If in doubt, say Y.

config CPU_FREQ_GOV_ONDEMAND
	tristate "'ondemand' cpufreq policy governor"
	select CPU_FREQ_TABLE
	help
	  'ondemand' - This driver adds a dynamic cpufreq policy governor.
	  The governor does a periodic polling and 
	  changes frequency based on the CPU utilization.
	  The support for this governor depends on CPU capability to
	  do fast frequency switching (i.e, very low latency frequency
	  transitions). 

	  To compile this driver as a module, choose M here: the
	  module will be called cpufreq_ondemand.

	  For details, take a look at linux/Documentation/cpu-freq.

	  If in doubt, say N.

config CPU_FREQ_GOV_ONDEMANDPLUS
	tristate "'ondemandplus' cpufreq policy governor"
	select CPU_FREQ_TABLE
	help
	  'ondemandplus' - This driver adds a dynamic cpufreq policy 
	  governor. The governor does a periodic polling and 
	  changes frequency based on the CPU utilization.
	  The support for this governor depends on CPU capability to
	  do fast frequency switching (i.e, very low latency frequency
	  transitions). 

	  To compile this driver as a module, choose M here: the
	  module will be called cpufreq_ondemandplus.

	  For details, take a look at linux/Documentation/cpu-freq.

	  If in doubt, say N.

config CPU_FREQ_GOV_INTERACTIVE
	tristate "'interactive' cpufreq policy governor"
	help
	  'interactive' - This driver adds a dynamic cpufreq policy governor
	  designed for latency-sensitive workloads.

	  This governor attempts to reduce the latency of clock
	  increases so that the system is more responsive to
	  interactive workloads.

	  To compile this driver as a module, choose M here: the
	  module will be called cpufreq_interactive.

	  For details, take a look at linux/Documentation/cpu-freq.

	  If in doubt, say N.

config CPU_FREQ_GOV_DYNAMIC
	tristate "'dynamic' cpufreq policy governor"
	help
		'dynamic' - A dynamic cpufreq governor for 
		Low Latency Frequency Transition capable processors 
		optimised for use in a battery environment.
		
		To compile this driver as a module, choose M here: the
		module will be called cpufreq_dynamic.
		
		For details, take a look at
		https://github.com/mkaluza/project-zen/wiki/Dynamic-governor

		If in doubt, say N.
	  
config CPU_FREQ_GOV_INTERACTIVEPLUS
	tristate "'interactiveplus' cpufreq policy governor"
	help
	  'interactiveplus' - This driver adds a dynamic cpufreq policy governor
	  designed for latency-sensitive workloads.
	  This governor attempts to reduce the latency of clock
	  increases so that the system is more responsive to
	  interactive workloads.
	  The 'interactiveplus' governor also hotplugs CPU1 on suspend.
	  To compile this driver as a module, choose M here: the
	  module will be called cpufreq_interactiveplus.
	  For details, take a look at linux/Documentation/cpu-freq.
	  If in doubt, say N.

config CPU_FREQ_GOV_CONSERVATIVE
	tristate "'conservative' cpufreq governor"
	depends on CPU_FREQ
	help
	  'conservative' - this driver is rather similar to the 'ondemand'
	  governor both in its source code and its purpose, the difference is
	  its optimisation for better suitability in a battery powered
	  environment.  The frequency is gracefully increased and decreased
	  rather than jumping to 100% when speed is required.

	  If you have a desktop machine then you should really be considering
	  the 'ondemand' governor instead, however if you are using a laptop,
	  PDA or even an AMD64 based computer (due to the unacceptable
	  step-by-step latency issues between the minimum and maximum frequency
	  transitions in the CPU) you will probably want to use this governor.

	  To compile this driver as a module, choose M here: the
	  module will be called cpufreq_conservative.

	  For details, take a look at linux/Documentation/cpu-freq.

	  If in doubt, say N.

config CPU_FREQ_GOV_ABYSSPLUG
        tristate "'abyssplug' cpufreq governor"
        depends on CPU_FREQ && NO_HZ && HOTPLUG_CPU
        help
          'abyssplug' - this driver mimics the frequency scaling behavior
          in 'ondemand', but with several key differences. First is
          that frequency transitions use the CPUFreq table directly,
          instead of incrementing in a percentage of the maximum
          available frequency. Second 'abyssplug' will offline auxillary
          CPUs when the system is idle, and online those CPUs once the
          system becomes busy again. This last feature is needed for
          architectures which transition to low power states when only
          the "master" CPU is online, or for thermally constrained
          devices.

          If you don't have one of these architectures or devices, use
          'ondemand' instead.

          If in doubt, say N.

config CPU_FREQ_GOV_PEGASUSQ
	tristate "'pegasusq' cpufreq policy governor"
	
config CPU_FREQ_GOV_SMARTASS2
	tristate "'smartassV2' cpufreq governor"
	depends on CPU_FREQ
	help
	 	'smartassV2' - a "smart" governor
		If in doubt, say N.

config CPU_FREQ_GOV_LAGFREE
        tristate "'lagfree' cpufreq governor"
        depends on CPU_FREQ
        help
          'lagfree' - this driver is rather similar to the 'ondemand'
          governor both in its source code and its purpose, the difference is
          its optimisation for better suitability in a battery powered
          environment.  The frequency is gracefully increased and decreased
          rather than jumping to 100% when speed is required.

          To compile this driver as a module, choose M here: the
          module will be called cpufreq_lagfree.

          For details, take a look at linux/Documentation/cpu-freq.

          If in doubt, say N.

config CPU_FREQ_GOV_ZENX
	tristate "'ZenX' cpufreq governor"
	depends on CPU_FREQ
	help
		'ZenX' - an interactive-based governor
		This governor provides full CPU hotplugging support
		based on average CPU load across all CPUs.
		For details, take a look at linux/Documentation/cpu-freq.
		If in doubt, say N

config CPU_FREQ_GOV_INTELLIACTIVE
	tristate "'intelliactive' cpufreq policy governor"
	help
	  'intelliactive' - This driver adds a dynamic cpufreq policy governor
	  designed for latency-sensitive workloads.
	  This governor attempts to reduce the latency of clock
	  increases so that the system is more responsive to
	  interactive workloads.
	  To compile this driver as a module, choose M here: the
	  module will be called cpufreq_interactive.
	  For details, take a look at linux/Documentation/cpu-freq.
	  If in doubt, say N.	
		
config CPU_FREQ_GOV_INTELLIDEMAND
       tristate "'intellidemand' cpufreq policy governor"
       select CPU_FREQ_TABLE
       help
         'intellidemand' - This driver adds a dynamic cpufreq policy governor.
         The governor does a periodic polling and
         changes frequency based on the CPU utilization.
         The support for this governor depends on CPU capability to
         do fast frequency switching (i.e, very low latency frequency
         transitions). with browsing detection based on GPU loading
         To compile this driver as a module, choose M here: the
         module will be called cpufreq_ondemand.
         For details, take a look at linux/Documentation/cpu-freq.
         If in doubt, say N.
		 
config INTELLI_MAX_ACTIVE_FREQ
	int "Max Active Freq for Intellidemand"
	depends on CPU_FREQ_GOV_INTELLIDEMAND
	default	1228000
	help
		Set default max active frequency for intellidemand


config INTELLI_MAX_INACTIVE_FREQ
	int "Max Inactive Freq for Intellidemand"
	depends on CPU_FREQ_GOV_INTELLIDEMAND
	default	800000
	help
		Set default max inactive frequency for intellidemand

config CPUFREQ_LIMIT_MAX_FREQ
	bool "Limit Max Freq"
	depends on CPU_FREQ_GOV_INTELLIDEMAND
	help
		Limit Max Freq while screen is on for Intellidemand governor
		
config CPU_FREQ_GOV_INTERACTIVEQ
	tristate "'interactiveQ' cpufreq policy governor"
	help
	  'interactiveQ' - This driver adds a dynamic cpufreq policy governor
	  designed for latency-sensitive workloads.
	  This governor attempts to reduce the latency of clock
	  increases so that the system is more responsive to
	  interactive workloads.
	  InteractiveQ will hotplug CPU1 when system goes *suspend*.
	  If in doubt, say N.


config CPU_FREQ_GOV_LIONHEART
	tristate "'lionheart' cpufreq governor"
	depends on CPU_FREQ
	  
config CPU_FREQ_GOV_HOTPLUG
       tristate "'hotplug' cpufreq governor"
       depends on CPU_FREQ && NO_HZ && HOTPLUG_CPU
       help
         'hotplug' - this driver mimics the frequency scaling behavior
         in 'ondemand', but with several key differences.  First is
         that frequency transitions use the CPUFreq table directly,
         instead of incrementing in a percentage of the maximum
         available frequency.  Second 'hotplug' will offline auxillary
         CPUs when the system is idle, and online those CPUs once the
         system becomes busy again.  This last feature is needed for
         architectures which transition to low power states when only
         the "master" CPU is online, or for thermally constrained
         devices.

         If you don't have one of these architectures or devices, use
         'ondemand' instead.

         If in doubt, say N.

config CPU_FREQ_GOV_PEGASUSQ
	tristate "'pegasusq' cpufreq policy governor"

config CPU_FREQ_GOV_PEGASUSQPLUS
	tristate "'pegasusq plus' cpufreq policy governor"

config CPU_FREQ_GOV_ONDEMANDQ
	tristate "'ondemand' cpufreq policy governor"
	depends on HAS_EARLYSUSPEND
	help
	   Based on ondemand,hotplug in suspend.

config CPU_FREQ_GOV_ZZMOOVE
	tristate "'zzmoove' cpufreq governor"
	depends on CPU_FREQ
	help
	  'zzmoove' - based on cpufreq_conservative, using predefined
	  frequency lookup tables and optimized scaling triggers instead of
	  % frequency steps to get smooth up/downscaling dependant on CPU load.
	  If in doubt, say N.

config CPU_FREQ_GOV_LULZACTIVEQ
	tristate "'lulzactiveq' cpufreq governor"
	depends on CPU_FREQ

config CPU_FREQ_GOV_FANTASY
	tristate "'fantasy' cpufreq policy governor"
	select CPU_FREQ_TABLE
	help
	  'fantasy' - This driver adds a dynamic cpufreq policy governor.
	  The governor does a periodic polling and
	  changes frequency based on the CPU utilization.
	  The support for this governor depends on CPU capability to
	  do fast frequency switching (i.e, very low latency frequency
	  transitions).
	  To compile this driver as a module, choose M here: the
	  module will be called cpufreq_fantasy.
	  For details, take a look at linux/Documentation/cpu-freq.
	  If in doubt, say N.

config CPU_FREQ_LIMITS_ON_SUSPEND
	bool "CPUfreq limits on suspend"
	depends on CPU_FREQ
	default y
		 
menu "x86 CPU frequency scaling drivers"
depends on X86
source "drivers/cpufreq/Kconfig.x86"
endmenu

endif
endmenu
